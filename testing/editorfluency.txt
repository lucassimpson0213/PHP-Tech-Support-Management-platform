#When editing text, move and make selections by character, word,
#line, and paragraph.
#When editing code, move by various syntactic units (matching
#delimiters, functions, modules, …).
#Reindent code following changes.
#Comment and uncomment blocks of code with a single command.
#Undo and redo changes.
#Split the editor window into multiple panels, and navigate between
#them.
#Navigate to a particular line number.
#Sort selected lines.
#Search for both strings and regular expressions, and repeat
#previous searches.
#Temporarily create multiple cursors based on a selection or on a
#pattern match, and edit the text at each in parallel.
#Display compilation errors in the current project.
#Run the current project’s tests

#
#comment all lines at once
#ctrl v visual block mode 
#select until the last line
#shift i and then insert comments
#
Certainly! Let’s delve into the fascinating world of Visual Mode in Vim. Visual Mode allows you to select text in different ways, making editing and manipulation more efficient. Here’s a breakdown of the three Visual Mode subsets:

Visual [Character] Mode (v):
This mode is akin to selecting individual characters or ranges of characters.
To enter Visual [Character] Mode, press v (lowercase ‘v’) while in Normal Mode.
Once in this mode, you can move the cursor using the navigation keys (h, j, k, and l).
Useful for precise character-level selections.
You can perform operations like deletion, yanking, and replacement on the selected text.
Visual Line Mode (V):
In Visual Line Mode, you select entire lines.
To enter Visual Line Mode, press V (uppercase ‘V’) while in Normal Mode.
Only complete lines are selected; individual characters or words cannot be chosen.
Great for quickly manipulating entire lines of text.
Visual Block Mode (Ctrl + v):
Visual Block Mode allows you to select text in a block-style rectangular shape.
To enter Visual Block Mode, press Ctrl + v while in Normal Mode.
You can create vertical selections that span across lines.
Useful for tasks like column-wise editing or block-based operations.